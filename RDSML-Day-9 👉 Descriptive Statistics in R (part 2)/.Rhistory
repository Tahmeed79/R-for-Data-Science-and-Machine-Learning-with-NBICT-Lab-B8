11/2
11%%2
11%/%2
library(tidyverse)
library(tidyverse)
library(ggplot2)
ggtree
library(readr)
prot_std_csv <- read_csv("C:/Users/tahme/OneDrive/Desktop/RE_ Kaadadjiny_ Introduction to Programming with R, Workshops series/prot_std.csv.csv")
View(prot_std_csv)
library(ggplot2)
protstd<- read.csv("prot_std.csv")
protstd<- read.csv("prot_std.csv")
protstd<- read.csv("prot_std.csv.csv")
protstd<- read.csv("prot_std_csv.csv")
protstd<- read.csv("prot_std_csv")
protstd<- read.csv(prot_std_csv)
ggplot()
View(prot_std_csv)
ggplot()+
geom_point()
setwd("~/R-for-Data-Science-and-Machine-Learning-with-NBICT-Lab-B8/RDSML-Day-9 ðŸ‘‰ Descriptive Statistics in R (part 2)")
distance
attach (nycflights13 :: flights)
head(nycflights13 :: flights)
nycflights13 :: flights
distance
summary(distance)
describe(distance)
summary(distance)
describe(distance)
distance
describe (distance)
demo = cbind(arr_delay, arr_time, distance)
demo
describe(demo)
# Using the New York airport flight data
install.packages("nycflights13")
install.packages("nycflights13")
attach(nycflights13::flights)
# Lets look at the first 6 records using the head() function
head(nycflights13::flights)
summary(distance)
describe(distance)
demo <- cbind(arr_delay, dep_delay, distance)
describe(demo)
colnames(demo) <- c('Arrival delay', 'Departure Delay', 'Distance Travelled')
describe(demo)
hist(dep_delay)
# How to group descriptve statistics
describeBy(distance, group=carrier)
# two levels of aggregation
aggregate(distance, by=list(carrier, month), FUN=mean, na.rm=T)
# two levels of aggregation
aggregate(distance, by=list(carrier, month), FUN=mean, na.rm=TRUE
install.packages("psych")
library(psych)
# Using the New York airport flight data
install.packages("nycflights13")
install.packages("nycflights13")
attach(nycflights13::flights)
# Lets look at the first 6 records using the head() function
head(nycflights13::flights)
summary(distance)
describe(distance)
demo <- cbind(arr_delay, dep_delay, distance)
describe(demo)
colnames(demo) <- c('Arrival delay', 'Departure Delay', 'Distance Travelled')
describe(demo)
hist(dep_delay)
# How to group descriptve statistics
describeBy(distance, group=carrier)
# two levels of aggregation
aggregate(distance, by=list(carrier, month), FUN=mean, na.rm=TRUE
describe(demo)
describe(demo)
colnames(demo) <- c('Arrival delay', 'Departure Delay', 'Distance Travelled')
describe(demo)
library(readr)
prot_std_csv <- read_csv("C:/Users/tahme/OneDrive/Desktop/RE_ Kaadadjiny_ Introduction to Programming with R, Workshops series/prot_std.csv.csv")
View(prot_std_csv)
library(readr)
prot_std_csv <- read_csv("C:/Users/tahme/OneDrive/Desktop/RE_ Kaadadjiny_ Introduction to Programming with R, Workshops series/prot_std.csv.csv")
View(prot_std_csv)
library(readr)
prot_std_csv <- read_csv("C:/Users/tahme/OneDrive/Desktop/RE_ Kaadadjiny_ Introduction to Programming with R, Workshops series/prot_std.csv.csv")
View(prot_std_csv)
library(ggplot2)
library(dplyr)
# Load data
data <- read.csv("prot_std.csv.csv")
# Linear regression model
model <- lm(abs ~ conc, data = data)
# Extract RÂ² value
r_squared <- summary(model)$r.squared
# Load data
data <- read.csv("prot_std.csv.csv")
# Load data
data <- read.csv("prot_std_csv.csv")
library(dplyr)
# Load data
data <- read.csv("prot_std_csv.csv")
# INTRODUCING HIST FUNSTIONS
dep_delay
hist(dep_delay)
# Load data
data <- read.csv("prot_std_csv.csv")
library(readr)
prot_std_csv <- read_csv("C:/Users/tahme/OneDrive/Desktop/RE_ Kaadadjiny_ Introduction to Programming with R, Workshops series/prot_std.csv.csv")
View(prot_std_csv)
# Load data
data <- read.csv("prot_std_csv.csv")
# Load data
data <- read.csv("prot_std.csv.csv")
# Linear regression model
model <- lm(abs ~ conc, data = data)
setwd("C:/Users/tahme/OneDrive/Desktop/RE_ Kaadadjiny_ Introduction to Programming with R, Workshops series")
# Load data
data <- read.csv("prot_std.csv.csv")
# Linear regression model
model <- lm(abs ~ conc, data = data)
# Extract RÂ² value
r_squared <- summary(model)$r.squared
# Create plot
ggplot(data, aes(x = conc, y = abs)) +
geom_point(color = "blue", size = 3) +  # Data points
geom_smooth(method = "lm", formula = y ~ x, color = "red", se = FALSE) +  # Regression line
labs(title = "Protein Standard Curve",
x = "Protein Concentration (Âµg/mL)",
y = "Absorbance (OD)") +
theme_classic() +
annotate("text", x = max(data$conc) * 0.8, y = max(data$abs) * 0.9,
label = paste("RÂ² =", round(r_squared, 4)), size = 5, color = "red")
# Create plot
ggplot(data, aes(x = conc, y = abs)) +
geom_point(color = "blue", size = 3) +  # Data points
geom_smooth(method = "lm", formula = y ~ x-1, color = "red", se = FALSE) +  # Regression line
labs(title = "Protein Standard Curve",
x = "Protein Concentration (Âµg/mL)",
y = "Absorbance (OD)") +
theme_classic() +
annotate("text", x = max(data$conc) * 0.8, y = max(data$abs) * 0.9,
label = paste("RÂ² =", round(r_squared, 4)), size = 5, color = "red")
# Create plot
ggplot(data, aes(x = conc, y = abs)) +
geom_point(color = "blue", size = 3) +  # Data points
geom_smooth(method = "lm", formula = y ~ x+1, color = "red", se = FALSE) +  # Regression line
labs(title = "Protein Standard Curve",
x = "Protein Concentration (Âµg/mL)",
y = "Absorbance (OD)") +
theme_classic() +
annotate("text", x = max(data$conc) * 0.8, y = max(data$abs) * 0.9,
label = paste("RÂ² =", round(r_squared, 4)), size = 5, color = "red")
# Create plot
ggplot(data, aes(x = conc, y = abs)) +
geom_point(color = "blue", size = 3) +  # Data points
geom_abline(slope = coef(model)[1], color = "red", linetype = "dashed", size = 1) +  # Regression line through (0,0)
labs(title = "Protein Standard Curve (Forced Through Origin)",
x = "Protein Concentration (Âµg/mL)",
y = "Absorbance (OD)") +
theme_classic() +
annotate("text", x = max(data$conc) * 0.8, y = max(data$abs) * 0.9,
label = paste("RÂ² =", round(r_squared, 4)), size = 5, color = "red")
# Create plot
ggplot(data, aes(x = conc, y = abs)) +
geom_point(color = "blue", size = 3) +  # Data points
geom_abline(slope = coef(model)[1], color = "red", linetype = "dashed", size = 1) +  # Regression line through (0,0)
labs(title = "Protein Standard Curve (Forced Through Origin)",
x = "Protein Concentration (Âµg/mL)",
y = "Absorbance (OD)") +
theme_classic() +
annotate("text", x = max(data$conc) * 0.8, y = max(data$abs) * 0.9,
label = paste("RÂ² =", round(r_squared, 4)), size = 5, color = "red")
# Create plot
ggplot(data, aes(x = conc, y = abs)) +
geom_point(color = "blue", size = 3) +  # Data points
geom_abline(slope = coef(model)[1], color = "red", linetype = "dashed", size = 1) +  # Regression line through (0,0)
labs(title = "Protein Standard Curve (Forced Through Origin)",
x = "Protein Concentration (Âµg/mL)",
y = "Absorbance (OD)") +
theme_classic() +
# Create plot
ggplot(data, aes(x = conc, y = abs)) +
geom_point(color = "blue", size = 3) +  # Data points
geom_abline(slope = coef(model)[1], color = "red", linetype = "dashed", size = 1) +  # Regression line through (0,0)
labs(title = "Protein Standard Curve (Forced Through Origin)",
x = "Protein Concentration (Âµg/mL)",
y = "Absorbance (OD)") +
theme_classic() +
# Extract RÂ² value
r_squared <- summary(model)$r.squared
# Create plot
ggplot(data, aes(x = conc, y = abs)) +
geom_point(color = "blue", size = 3) +  # Data points
geom_smooth(method = "lm", formula = y ~ x+1, color = "red", se = FALSE) +  # Regression line
labs(title = "Protein Standard Curve",
x = "Protein Concentration (Âµg/mL)",
y = "Absorbance (OD)") +
theme_classic() +
annotate("text", x = max(data$conc) * 0.8, y = max(data$abs) * 0.9,
label = paste("RÂ² =", round(r_squared, 4)), size = 5, color = "red")
# Create plot
ggplot(data, aes(x = conc, y = abs)) +
geom_point(color = "blue", size = 3) +  # Data points
geom_smooth(method = "lm", formula = y ~ x-1, color = "red", se = FALSE) +  # Regression line
labs(title = "Protein Standard Curve",
x = "Protein Concentration (Âµg/mL)",
y = "Absorbance (OD)") +
theme_classic() +
annotate("text", x = max(data$conc) * 0.8, y = max(data$abs) * 0.9,
label = paste("RÂ² =", round(r_squared, 4)), size = 5, color = "red")
# Create plot
ggplot(data, aes(x = conc, y = abs)) +
geom_point(color = "blue", size = 3) +  # Data points
geom_smooth(method = "lm", formula = y ~ x-1, color = "red", se = FALSE) +  # Regression line
labs(title = "Protein Standard Curve",
x = "Protein Concentration (Âµg/mL)",
y = "Absorbance (OD)") +
theme_classic() +
annotate("text", x = max(data$conc) * 0.8, y = max(data$abs) * 0.9,
label = paste("RÂ² =", round(r_squared, 4)), size = 5, color = "black")
# Create plot
ggplot(data, aes(x = conc, y = abs)) +
geom_point(color = "blue", size = 3) +  # Data points
geom_smooth(method = "lm", formula = y ~ x-1, color = "red", se = FALSE) +  # Regression line
labs(title = "Protein Standard Curve",
x = "Protein Concentration (Âµg/mL)",
y = "Absorbance (OD)") +
theme_classic() +
annotate("text", x = max(data$conc) * 0.8, y = max(data$abs) * 0.9,
label = paste("RÂ² =", round(r_squared, 4)), size = 5, color = "black", position= middle)
# Create plot
ggplot(data, aes(x = conc, y = abs)) +
geom_point(color = "blue", size = 3) +  # Data points
geom_smooth(method = "lm", formula = y ~ x-1, color = "red", se = FALSE) +  # Regression line
labs(title = "Protein Standard Curve",
x = "Protein Concentration (Âµg/mL)",
y = "Absorbance (OD)") +
theme_classic() +
annotate("text", x = max(data$conc) * 0.8, y = max(data$abs) * 0.9,
label = paste("RÂ² =", round(r_squared, 4)), size = 5, color = "black", position= dodge)
# How to group descriptve statistics
describeBy(distance, group=carrier)
setwd("~/R-for-Data-Science-and-Machine-Learning-with-NBICT-Lab-B8/RDSML-Day-9 ðŸ‘‰ Descriptive Statistics in R (part 2)")
library(psych)
attach(nycflights13::flights)
# Lets look at the first 6 records using the head() function
head(nycflights13::flights)
summary(distance)
describe(distance)
demo <- cbind(arr_delay, dep_delay, distance)
describe(demo)
colnames(demo) <- c('Arrival delay', 'Departure Delay', 'Distance Travelled')
describe(demo)
# INTRODUCING HIST FUNSTIONS
dep_delay
hist(dep_delay)
# How to group descriptve statistics
describeBy(distance, group=carrier)
# two levels of aggregation
aggregate(distance, by=list(carrier, month), FUN=mean, na.rm=TRUE
# How to group descriptve statistics
head(nycflights :: flights)
# How to group descriptve statistics
head(nycflights13 :: flights)
describeBy(distance, group=carrier)
summarise(carrier)
summary(carrier)
carrierfact= factor(carrier)
summary(carrier)
describeBy(distance, group=carrier)
# two levels of aggregation
aggregate(distance, by = list(carrier, month), FUN=mean, na.rm=TRUE
# two levels of aggregation
aggregate(distance, by = list(carrier, month), FUN=mean, na.rm=TRUE)
# two levels of aggregation
aggregate(distance, by = list(carrier, month), FUN=mean, na.rm=TRUE)
# two levels of aggregation
aggregate(distance, by = list(carrier, month), FUN=mean, na.rm=TRUE)+
aggregate(distance, by = list(carrier, month), FUN=sd, na.rm=TRUE)
aggregate(distance, by = list(carrier, month), FUN=sd, na.rm=TRUE)
